/*    Codigo practica olimpiadas programacion 2021    Et24 De17    Dante Alfonso*/// entry sensors#define sensorEntry1 11#define sensorEntryEcho 9#define sensorEntry3 7#define sensorEntryTrigger 8// exit sensors#define sensorExit1 2#define sensorExitEcho 3#define sensorExit3 5#define sensorExitTrigger 4// panel#define buzzerPin   6#define greenLed    12#define redLed      13// class for capacity and accountclass local {private:    int maxCapacity = 10;    int doorLenght = 40;public:    int actualInside = 0;    void updateFormDb() {    };    int getActualInside() {        return actualInside;    };    int getMaxCapacity() {        return maxCapacity;    };    int getdoorLenght() {        return doorLenght;    };    void addPersonInside() {        actualInside += 1;    };    void sustractPersonInside() {        actualInside -= 1;    };};local place;// end variables//// setupvoid inputMode(int pin) {// set pin in input mode    pinMode(pin, INPUT);};void outputMode(int pin) {// set pin in output mode    pinMode(pin, OUTPUT);};void setupExitSensors() { //    set the pins for sensors on the exit door     inputMode(sensorExit1);//	        sensor one    inputMode(sensorExitEcho);//	    sensor two    inputMode(sensorExit3);// 	        sensor three    outputMode(sensorExitTrigger);//	trigger sensor two };void setupEntrySensors() {//    set the pins for sensors on the entry door     inputMode(sensorEntry1);//	        sensor two    inputMode(sensorEntryEcho);//	    sensor two    inputMode(sensorEntry3);// 	        sensor three    outputMode(sensorEntryTrigger);//	trigger sensor two };void setupPanel() { //          set the pins for the notification panels    outputMode(buzzerPin);//	        buzzer    outputMode(greenLed);//	            green led    outputMode(redLed);//               red led};void setup() {    Serial.begin(9600);    setupEntrySensors();    setupExitSensors();    setupPanel();};// end setup//// statesvoid isOpen() {// if the local is open    digitalWrite(redLed, LOW);    //Serial.println("is open");    noTone(buzzerPin);    digitalWrite(greenLed, HIGH);};void isFull() {// if the local is full    digitalWrite(redLed, HIGH);    //Serial.println("is full");    digitalWrite(greenLed, LOW);};void isOverCapacity() {    //Serial.println("get out");    tone(buzzerPin, 100, 2500);};//  end states//// functionsfloat ultrasonicResponse(int triggerPin, int echoPin) {    digitalWrite(triggerPin, LOW);    delayMicroseconds(5);    digitalWrite(triggerPin, HIGH);    delayMicroseconds(10);    digitalWrite(triggerPin, LOW);    return (pulseIn(echoPin, HIGH) / 58);};void detectEntry() {// detect an entry of the place    float distance = ultrasonicResponse(sensorEntryTrigger, sensorEntryEcho);    if ((digitalRead(sensorEntry1) == 1 && digitalRead(sensorEntry3) == 1) || distance <= place.getdoorLenght()) {        place.addPersonInside();    }};void detectExit() {// detect an exit of the place    float distance = ultrasonicResponse(sensorExitTrigger, sensorExitEcho);    if ((digitalRead(sensorExit1) == 1 && digitalRead(sensorExit3) == 1) || distance <= place.getdoorLenght()) {        place.sustractPersonInside();    }};// end functions////void loop() {    /*    Serial.print("people: ");    Serial.println(place.getActualInside());    */    detectEntry();    detectExit();    if (place.getActualInside() < place.getMaxCapacity()) {        isOpen();        if (place.getActualInside() < 0) {            //reportIrregular();            place.addPersonInside();        }    }    else {        isFull();        if (place.getActualInside() > place.getMaxCapacity()) isOverCapacity();        else noTone(buzzerPin);    }};